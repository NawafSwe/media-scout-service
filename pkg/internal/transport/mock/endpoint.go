// Code generated by MockGen. DO NOT EDIT.
// Source: endpoint.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	business "github.com/NawafSwe/media-scout-service/pkg/internal/business"
	gomock "github.com/golang/mock/gomock"
)

// Mockhandler is a mock of handler interface.
type Mockhandler struct {
	ctrl     *gomock.Controller
	recorder *MockhandlerMockRecorder
}

// MockhandlerMockRecorder is the mock recorder for Mockhandler.
type MockhandlerMockRecorder struct {
	mock *Mockhandler
}

// NewMockhandler creates a new mock instance.
func NewMockhandler(ctrl *gomock.Controller) *Mockhandler {
	mock := &Mockhandler{ctrl: ctrl}
	mock.recorder = &MockhandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhandler) EXPECT() *MockhandlerMockRecorder {
	return m.recorder
}

// FetchAndInsertMedia mocks base method.
func (m *Mockhandler) FetchAndInsertMedia(ctx context.Context, term string, limit int) (business.MediaResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAndInsertMedia", ctx, term, limit)
	ret0, _ := ret[0].(business.MediaResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAndInsertMedia indicates an expected call of FetchAndInsertMedia.
func (mr *MockhandlerMockRecorder) FetchAndInsertMedia(ctx, term, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAndInsertMedia", reflect.TypeOf((*Mockhandler)(nil).FetchAndInsertMedia), ctx, term, limit)
}
