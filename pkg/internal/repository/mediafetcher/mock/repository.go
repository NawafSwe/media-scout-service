// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	itunes "github.com/NawafSwe/media-scout-service/pkg/clients/itunes"
	gomock "github.com/golang/mock/gomock"
)

// MocksearcherClient is a mock of searcherClient interface.
type MocksearcherClient struct {
	ctrl     *gomock.Controller
	recorder *MocksearcherClientMockRecorder
}

// MocksearcherClientMockRecorder is the mock recorder for MocksearcherClient.
type MocksearcherClientMockRecorder struct {
	mock *MocksearcherClient
}

// NewMocksearcherClient creates a new mock instance.
func NewMocksearcherClient(ctrl *gomock.Controller) *MocksearcherClient {
	mock := &MocksearcherClient{ctrl: ctrl}
	mock.recorder = &MocksearcherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksearcherClient) EXPECT() *MocksearcherClientMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MocksearcherClient) Search(ctx context.Context, term string, limit int) (itunes.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, term, limit)
	ret0, _ := ret[0].(itunes.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MocksearcherClientMockRecorder) Search(ctx, term, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MocksearcherClient)(nil).Search), ctx, term, limit)
}
